#pragma checksum "C:\Users\Shivendra\Desktop\test\ML5ForBlazor\SampleApplication\Pages\NeuralNetwork.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1bc09f8796d9ec94fb2b79ebbe44247bf078d8bd"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SampleApplication.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Shivendra\Desktop\test\ML5ForBlazor\SampleApplication\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Shivendra\Desktop\test\ML5ForBlazor\SampleApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Shivendra\Desktop\test\ML5ForBlazor\SampleApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Shivendra\Desktop\test\ML5ForBlazor\SampleApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Shivendra\Desktop\test\ML5ForBlazor\SampleApplication\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Shivendra\Desktop\test\ML5ForBlazor\SampleApplication\_Imports.razor"
using SampleApplication;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Shivendra\Desktop\test\ML5ForBlazor\SampleApplication\_Imports.razor"
using SampleApplication.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Shivendra\Desktop\test\ML5ForBlazor\SampleApplication\Pages\NeuralNetwork.razor"
using ML5;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Shivendra\Desktop\test\ML5ForBlazor\SampleApplication\Pages\NeuralNetwork.razor"
using System.IO;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/NeuralNetwork")]
    public partial class NeuralNetwork : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 171 "C:\Users\Shivendra\Desktop\test\ML5ForBlazor\SampleApplication\Pages\NeuralNetwork.razor"
 
    int r = 150, g = 10, b = 0;
    string output = "";
    ML5.NeuralNetwork net;
    protected override void OnInitialized()
    {
        NeuralNetworkOptions option = new NeuralNetworkOptions()
        {
            inputs = new string[] { "r", "g", "b" },
            outputs = new string[] { "label" },
            task = NetworkTask.classification,
            debug = true

        };

        net = new ML5.NeuralNetwork(Runtime, option);
        net.OnModelLoaded += ProcessModel;
        net.OnClassification += OnClassify;
        net.OnTrainingComplete += Classify;
        net.OnLoad += () =>
        {
            updatePredict();
            net.Print("Loaded Model Data ie. Wts and Bias ");
        };
        net.OnSave += () => { net.Print("Saved Model Data ie. Wts and Bias"); };

        LoadModel();
    }

    void ProcessModel()
    {
        net.Print("Model Loaded");
        net.NormalizeData();
        net.Train(new TrainingOptions() { epochs = 64, batchSize = 32 });
    }
    void Classify()
    {
        net.Classify(new int[] { r, g, b });
    }
    void OnClassify(string err, CResult[] result)
    {
        output = result[0].label;
        StateHasChanged();

    }
    void updatePredict()
    {
        Classify();
    }

    void LoadModel()
    {

        net.Load("data/color_model/model.json");
    }
    private async void LoadDataSet()
    {
        DataSet[] datasets = await Http.GetJsonAsync<DataSet[]>("data/colorData.json");
        foreach (var item in datasets)
        {
            net.AddData(new short[] { item.r, item.g, item.b }, new string[] { item.label });
        }
        ProcessModel();
        net.Print("Data set Added");
    }
    private void Train()
    {
        net.Train();
    }
    private void Save()
    {
        net.Save();
    }
    class DataSet
    {
        public short b { get; set; }
        public short r { get; set; }
        public short g { get; set; }
        public string label { get; set; }


    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime Runtime { get; set; }
    }
}
#pragma warning restore 1591
